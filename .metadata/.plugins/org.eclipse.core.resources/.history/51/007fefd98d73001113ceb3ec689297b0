/*
 * 
 * © 2011 WhereYouShop.com  All Rights Reserved | http://www.whereyoushop.com 
 * Emergency 24    | The WhereYouShop Team  
 *
 */

package com.dealsmagazine.seller;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.dealsmagazine.globals.Globals;
import com.dealsmagazine.util.FileUtils;
import com.dealsmagazine.util.NetworkUtils;
import com.dealsmagazine.util.PieChartItem;
import com.dealsmagazine.util.PieChartUtils;
import com.dealsmagazine.util.SellerInfoViewUtils;
import com.dealsmagazine.seller.R;

public class SellerInfoView extends Activity {

	List<PieChartItem> PieData = new ArrayList<PieChartItem>(0);
	final int MENU_LOGOUT = 1;
	static private Context appContext;

	private boolean isGetSellerInfoSuccess = false;
	private String sGetSellerInfoErrorMessage = "";
	private ProgressDialog mypDialog;
	private LinearLayout TargetPieView;
	private Spinner spinner_business_name;
	private Button btn_seller_info_redeem;
	private Button btn_seller_info_refresh;
	private TextView tv_redeem_number;
	private TextView tv_not_redeem_number;
	private TextView tv_total_voucher_number;
	private TextView tv_active_deals;
	private TextView tv_waiting_deals;
	private TextView tv_current_balance;
	private TextView tv_purchase_amount;
	private TextView tv_pending_earnings;
	private TextView tv_total_paid;
	private TextView tv_email_sent;
	private TextView tv_last_email_sent_date;
	private TextView tv_last_payment_date;

	// Price Formatter
	DecimalFormat df = new DecimalFormat("###0.00");

	// Null Time
	String time_none = new String("1900-01-01 00:00:00");

	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle saveInstanceState) {
		super.onCreate(saveInstanceState);
		setContentView(R.layout.seller_info_view);

		mypDialog = new ProgressDialog(this);
		mypDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
		mypDialog.setTitle(getString(R.string.app_name));

		TargetPieView = (LinearLayout) findViewById(R.id.pie_chart);
		spinner_business_name = (Spinner) findViewById(R.id.myspinner);

		btn_seller_info_redeem = (Button) this.findViewById(R.id.btn_seller_info_redeem);
		btn_seller_info_refresh = (Button) this.findViewById(R.id.btn_seller_info_refresh);

		tv_redeem_number = (TextView) this.findViewById(R.id.redeem_number);
		tv_not_redeem_number = (TextView) this.findViewById(R.id.not_redeem_number);
		tv_total_voucher_number = (TextView) this.findViewById(R.id.total_number);
		tv_active_deals = (TextView) this.findViewById(R.id.active_deals);
		tv_waiting_deals = (TextView) this.findViewById(R.id.waiting_deals);
		tv_current_balance = (TextView) this.findViewById(R.id.current_balance);
		tv_purchase_amount = (TextView) this.findViewById(R.id.purchase_amount);
		tv_pending_earnings = (TextView) this.findViewById(R.id.pending_earnings);
		tv_total_paid = (TextView) this.findViewById(R.id.total_paid);
		tv_email_sent = (TextView) this.findViewById(R.id.email_sent);
		tv_last_email_sent_date = (TextView) this.findViewById(R.id.last_email_sent);
		tv_last_payment_date = (TextView) this.findViewById(R.id.last_payment_date);

		btn_seller_info_redeem.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				Intent ia = new Intent(SellerInfoView.this, InputVoucherView.class);
				startActivityForResult(ia, Globals.INPUT_VOUCHER_VIEW);
				finish();
			}
		});

		btn_seller_info_refresh.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				refreshUserInfoData();
			}
		});

		// Get Sellers
		getSellerInfo();

	}

	/*
	 * Get Seller Data
	 */
	private void getSellerInfo() {

		byte[] sellerInfo = null;

		try {
			sellerInfo = readInternalStoragePrivate(Globals.LOGIN_CACHE);
			saveSellerInfo(sellerInfo);
			refreshSellerInfo();

		} catch (Exception e) {

			// Refresh Seller Data
			new getSellerInfoTask().execute();

		}
	}

	/*
	 * Refresh Seller Info Data
	 */
	private void refreshUserInfoData() {

		if (!NetworkUtils.isNetworkAvailable(this)) {
			showMessageBox(getString(R.string.no_internet));
		} else {

			try {
				int position_business = ((User) getApplication()).loadbusinessPositonFromPreferences();
				final String fname = ((User) getApplication()).loaduserIdFromPreferences() + Integer.toString(position_business);
				SellerInfoViewUtils.deleteInternalStoragePrivate(this, Globals.LOGIN_CACHE);
				SellerInfoViewUtils.deleteInternalStoragePrivate(this, fname);

			} catch (Exception e) {

			}
			// Get New User Data
			getSellerInfo();
		}
	}

	/*
	 * Get Quick Stats Data
	 */
	private void getQuickStats() {

		int position = ((User) getApplication()).loadbusinessPositonFromPreferences();
		String fname = ((User) getApplication()).loaduserIdFromPreferences() + Integer.toString(position);
		byte[] quickStats = null;
		try {
			quickStats = readInternalStoragePrivate(fname);

			if (isgetQuickStatsSuccess(FileUtils.convertByteArrayToString(quickStats))) {
				refreshQuickStats(fname);

			}
		} catch (Exception e) {
			new getQuickStatsTask().execute();
		}
	}

	/*
	 * Save Seller
	 */
	private void saveSellerInfo(byte[] sellerInfo) {
		final String fname = ((User) getApplication()).loaduserIdFromPreferences();
		SellerInfoViewUtils.writeInternalStoragePrivate(this, fname, sellerInfo);
		SellerInfoViewUtils.writeInternalStoragePrivate(this, Globals.LOGIN_CACHE, sellerInfo);
	}

	/*
	 * Save QuickStats
	 */
	private void saveQuickStats(byte[] quickStats) {

		int position = ((User) getApplication()).loadbusinessPositonFromPreferences();
		String fname = ((User) getApplication()).loaduserIdFromPreferences() + Integer.toString(position);
		SellerInfoViewUtils.writeInternalStoragePrivate(this, fname, quickStats);
	}

	/*
	 * Refresh SellerInfoView
	 */
	private void refreshSellerInfo() {

		final String fname = ((User) getApplication()).loaduserIdFromPreferences();
		byte[] sellerInfo_buffer = readInternalStoragePrivate(fname);
		String getSellerInfoResult_String = FileUtils.convertByteArrayToString(sellerInfo_buffer);
		isGetSellerInfoSuccess = isgetSellerInfoSuccess(getSellerInfoResult_String);

		if (isGetSellerInfoSuccess) {
			refreshBusinessNameSpinner(fname);
			spinner_business_name.setOnItemSelectedListener(new OnItemSelectedListener() {
				public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

					Spinner spinner = (Spinner) parent;
					((User) getApplication()).setbusinessPosition(position);
					((User) getApplication()).saveBusinessPositionToPreferences();
					((User) getApplication()).setbusinessName(spinner.getSelectedItem().toString());
					((User) getApplication()).saveBusinessNameToPreferences();

					// Update Seller Id
					getSellerIdByPosition();

					// Refresh Seller Status
					getQuickStats();
				}

				public void onNothingSelected(AdapterView<?> parent) {

				}
			});
		} else {
		}
	}

	/*
	 * Get the Seller ID
	 */
	private void getSellerIdByPosition() {

		final int position = ((User) getApplication()).loadbusinessPositonFromPreferences();
		String fname = ((User) getApplication()).loaduserIdFromPreferences();

		final byte[] buffer;
		buffer = readInternalStoragePrivate(fname);
		if (buffer != null) {
			new Thread() {
				@Override
				public void run() {
					try {
						String string_seller_id = new String(buffer);
						final JSONObject json_object_seller_id = new JSONObject(string_seller_id);
						final JSONObject json_object_pie_data = json_object_seller_id.getJSONObject("Data");
						final JSONArray json_array_seller_id = json_object_pie_data.getJSONArray("MySellers");

						final JSONObject oSellerId = json_array_seller_id.getJSONObject(position);
						final int sellerId = oSellerId.getInt("SellerID");
						((User) getApplication()).setsellerId(Integer.toString(sellerId));
						((User) getApplication()).saveSellerIdToPreferences();

						SellerInfoView.this.runOnUiThread(new Runnable() {
							public void run() {

							}
						});

					} catch (Exception e) {

					}
				}
			}.start();
		}
	}

	/*
	 * JSON Parser, Seller Info Success
	 */
	private boolean isgetSellerInfoSuccess(String getSellerInfoResult) {
		boolean getSellerInfoResult_boolean = false;
		String getSellerInfoResult_json = getSellerInfoResult;
		try {
			final JSONObject json_seller_info_validate = new JSONObject(getSellerInfoResult_json);
			getSellerInfoResult_boolean = json_seller_info_validate.getBoolean("Success");
			if (getSellerInfoResult_boolean) {
				getSellerInfoResult_boolean = true;

			} else {
				sGetSellerInfoErrorMessage = json_seller_info_validate.getString("Message");
				showMessageBox(sGetSellerInfoErrorMessage);
			}
		} catch (Exception e) {
			showMessageBox(getString(R.string.update_err));
		}
		return getSellerInfoResult_boolean;
	}

	/*
	 * JSON Parser, Seller Info Success
	 */
	private boolean isgetQuickStatsSuccess(String getQuickStatsResult) {
		boolean getSellerInfoResult_boolean = false;
		String getSellerInfoResult_json = getQuickStatsResult;
		try {
			final JSONObject json_seller_info_validate = new JSONObject(getSellerInfoResult_json);
			getSellerInfoResult_boolean = json_seller_info_validate.getBoolean("Success");
			if (getSellerInfoResult_boolean) {
				getSellerInfoResult_boolean = true;
			} else {
				sGetSellerInfoErrorMessage = json_seller_info_validate.getString("Message");
				showMessageBox(sGetSellerInfoErrorMessage);
			}

		} catch (Exception e) {
			showMessageBox("Exception");
		}

		return getSellerInfoResult_boolean;
	}

	/*
	 * JSON Parser, Quick STATS
	 */
	public void refreshQuickStats(String fname) {
		final byte[] buffer;
		buffer = readInternalStoragePrivate(fname);
		if (buffer != null) {
			new Thread() {
				@Override
				public void run() {
					try {
						String string_quick_stats = new String(buffer);
						final JSONObject json_object_quick_stats = new JSONObject(string_quick_stats);
						final JSONObject oQuickStats = json_object_quick_stats.getJSONObject("Data");

						final int total_voucher_number = oQuickStats.getInt("NumPurchases");
						final int voucher_redeemed = oQuickStats.getInt("NumVouchersRedeemed");
						final int active_deals = oQuickStats.getInt("NumDealsOpen");
						final int waiting_deals = oQuickStats.getInt("NumDealsWaitingForSellerRelease");
						final int email_sent = oQuickStats.getInt("NumEmailsSent");

						final Double current_balance = oQuickStats.getDouble("Balance");
						final Double purchase_amount = oQuickStats.getDouble("PurchaseAmount");
						final Double pending_earnings = oQuickStats.getDouble("PendingEarnings");
						final Double total_paid = oQuickStats.getDouble("TotalPaid");

						final String last_email_sent_date = oQuickStats.getString("LastEmailSent");
						final String last_payment_date = oQuickStats.getString("LastPaymentDate");

						SellerInfoView.this.runOnUiThread(new Runnable() {
							public void run() {
								tv_active_deals.setText(Integer.toString(active_deals));
								tv_waiting_deals.setText(Integer.toString(waiting_deals));

								try {
									tv_current_balance.setText("$" + df.format(current_balance));
								} catch (Exception e) {
									tv_current_balance.setText("$" + Double.toString(current_balance));
								}

								try {
									tv_purchase_amount.setText("$" + df.format(purchase_amount));
								} catch (Exception e) {
									tv_purchase_amount.setText("$" + Double.toString(purchase_amount));
								}

								try {
									tv_pending_earnings.setText("$" + df.format(pending_earnings));
								} catch (Exception e) {
									tv_pending_earnings.setText("$" + Double.toString(pending_earnings));
								}

								try {
									tv_total_paid.setText("$" + df.format(total_paid));
								} catch (Exception e) {
									tv_total_paid.setText("$" + Double.toString(total_paid));
								}

								tv_email_sent.setText("" + Integer.toString(email_sent));

								if (last_email_sent_date.equals(time_none)) {
									tv_last_email_sent_date.setText("None");
								} else {
									tv_last_email_sent_date.setText(last_email_sent_date);
								}

								if (last_payment_date.equals(time_none)) {
									tv_last_payment_date.setText("None");
								} else {
									tv_last_payment_date.setText(last_payment_date);
								}

								int voucher_not_redeemed = total_voucher_number - voucher_redeemed;
								refreshPieView(voucher_redeemed, voucher_not_redeemed);

								tv_redeem_number.setText("Redeemed: " + Integer.toString(voucher_redeemed));
								tv_not_redeem_number.setText("Not Redeemed: " + Integer.toString(voucher_not_redeemed));
								tv_total_voucher_number.setText("Total: " + Integer.toString(total_voucher_number));
							}
						});

					} catch (Exception e) {

					}
				}
			}.start();
		}
	}

	/*
	 * JSON Parser, Refresh Business Spinner
	 */
	public void refreshBusinessNameSpinner(String fname) {

		final ArrayAdapter<String> business_adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item);
		business_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

		final byte[] buffer;
		buffer = readInternalStoragePrivate(fname);

		if (buffer != null) {
			new Thread() {
				@Override
				public void run() {
					try {
						String string_business_name_spinner = new String(buffer);
						final JSONObject json_object_business_name = new JSONObject(string_business_name_spinner);
						final JSONObject json_object_business_name_data = json_object_business_name.getJSONObject("Data");
						JSONArray json_array_business_name = json_object_business_name_data.getJSONArray("MySellers");
						int countVoucher = json_array_business_name.length();
						for (int i = 0; i < countVoucher; i++) {
							JSONObject oBusinessName = json_array_business_name.getJSONObject(i);
							String businessname = oBusinessName.getString("Name");
							business_adapter.add(businessname);
						}

						SellerInfoView.this.runOnUiThread(new Runnable() {
							public void run() {
								spinner_business_name.setAdapter(business_adapter);
								spinner_business_name.setSelection(((User) getApplication()).loadbusinessPositonFromPreferences());
							}
						});

					} catch (Exception e) {

					}
				}
			}.start();
		}
	}

	/*
	 * Refresh Pie Chart
	 * 
	 * @Param count_1 Redeem Vouchers Number
	 * 
	 * @Param count_2 Not redeem Vouchers Number
	 */
	public void refreshPieView(int count_1, int count_2) {
		TargetPieView.removeAllViews();
		TargetPieView.addView(drawPieChart(count_1, count_2));
	}

	/*
	 * Draw Pie Chart
	 */
	public ImageView drawPieChart(int count_1, int count_2) {
		PieChartItem Item = null;
		int MaxCount = count_1 + count_2;

		Item = new PieChartItem();
		Item.Count = count_1;
		Item.Label = "Count_1";
		Item.Color = 0xff4E83EF; // Blue
		PieData.add(Item);

		Item = new PieChartItem();
		Item.Count = count_2;
		Item.Label = "Count_2";
		Item.Color = 0xffF9B646; // Yellow
		PieData.add(Item);

		int Size = 200;
		int BgColor = 0xffa1a1a1;
		Bitmap mBackgroundImage = Bitmap.createBitmap(Size, Size, Bitmap.Config.RGB_565);
		PieChartUtils PieChartView = new PieChartUtils(this);
		PieChartView.setLayoutParams(new LayoutParams(Size, Size));
		PieChartView.setGeometry(Size, Size, 2, 2, 2, 2);
		PieChartView.setSkinParams(BgColor);
		PieChartView.setData(PieData, MaxCount);
		PieChartView.invalidate();
		PieChartView.draw(new Canvas(mBackgroundImage));
		PieChartView = null;
		ImageView mImageView = new ImageView(this);
		mImageView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
		mImageView.setBackgroundColor(BgColor);
		mImageView.setImageBitmap(mBackgroundImage);

		return mImageView;
	}

	/*
	 * Alert
	 */
	private void showMessageBox(String message) {
		new AlertDialog.Builder(this).setPositiveButton("OK", null).setMessage(message).show();
	}

	/*
	 * Cache Reader
	 */
	public byte[] readInternalStoragePrivate(String filename) {
		int len = 1024;
		byte[] buffer = new byte[len];
		try {
			FileInputStream fis = openFileInput(filename);
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			int nrb = fis.read(buffer, 0, len);
			while (nrb != -1) {
				baos.write(buffer, 0, nrb);
				nrb = fis.read(buffer, 0, len);
			}
			buffer = baos.toByteArray();
			fis.close();
		} catch (FileNotFoundException e) {
			Log.d(appContext.getString(R.string.app_name) + ".readInternalStorage()", "FileNotFoundException: " + e);
			e.printStackTrace();
		} catch (IOException e) {
			Log.d(appContext.getString(R.string.app_name) + ".readInternalStorage()", "IOException: " + e);
			e.printStackTrace();
		}
		return buffer;
	}

	/*
	 * Get Seller Data
	 */
	class getSellerInfoTask extends AsyncTask<Void, Void, byte[]> {
		public byte[] doInBackground(Void... params) {
			byte[] buffer_c = null;
			String username = ((User) getApplication()).loadusernameFrompreferences();
			String password = ((User) getApplication()).loadpasswordFrompreferences();

			try {
				String temp = NetworkUtils.validateLogin(username, password);
				buffer_c = FileUtils.convertStringToByteArray(temp);
				saveSellerInfo(buffer_c);

			} catch (Exception e) {
				showMessageBox(getString(R.string.net_time_out));
			}
			return buffer_c;
		}

		@Override
		public void onPreExecute() {
			mypDialog.setMessage("Loading...");
			mypDialog.show();
		}

		@Override
		public void onPostExecute(byte[] buffer_b) {
			if (buffer_b != null) {
				try {

					refreshSellerInfo();

				} catch (Exception e) {
					showMessageBox(getString(R.string.net_time_out));
					mypDialog.dismiss();
				}
			} else {
				showMessageBox(getString(R.string.net_time_out));
				mypDialog.dismiss();
			}
		}
	}

	/*
	 * Get Quick Stats Data
	 */
	class getQuickStatsTask extends AsyncTask<Void, Void, byte[]> {
		public byte[] doInBackground(Void... params) {
			byte[] buffer_c = null;
			String username = ((User) getApplication()).loadusernameFrompreferences();
			String password = ((User) getApplication()).loadpasswordFrompreferences();
			String sellerId = ((User) getApplication()).loadSellerIdFromPreferences();

			try {
				String temp = NetworkUtils.getQuickStats(username, password, sellerId);
				buffer_c = FileUtils.convertStringToByteArray(temp);
				saveQuickStats(buffer_c);

			} catch (Exception e) {
				showMessageBox(getString(R.string.net_time_out));
			}
			return buffer_c;
		}

		@Override
		public void onPreExecute() {
			mypDialog.setMessage("Refresh Data...");
			mypDialog.show();
		}

		@Override
		public void onPostExecute(byte[] buffer_b) {

			if (buffer_b != null) {
				try {
					mypDialog.dismiss();
					final int position = ((User) getApplication()).loadbusinessPositonFromPreferences();
					String fname = ((User) getApplication()).loaduserIdFromPreferences() + Integer.toString(position);
					refreshQuickStats(fname);

				} catch (Exception e) {
					showMessageBox(getString(R.string.net_time_out));
				}

			} else {
				showMessageBox(getString(R.string.net_time_out));
			}

		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		menu.add(0, MENU_LOGOUT, 0, "Logout").setIcon(android.R.drawable.ic_lock_power_off);
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onOptionsItemSelected(android.view.MenuItem)
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		switch (item.getItemId()) {

		case MENU_LOGOUT:
			Intent i = new Intent(SellerInfoView.this, LogoutView.class);
			i.putExtra(LogoutView.KEY_LOGOUT_SELECTOR, Globals.SELLER_INFO_VIEW);
			startActivityForResult(i, Globals.LOGOUT_VIEW);
			finish();
			break;

		default:
			break;
		}
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onBackPressed()
	 */
	@Override
	public void onBackPressed() {
		Intent intent = new Intent();
		intent.setClass(SellerInfoView.this, DealsMagazineBusinessActivity.class);
		startActivity(intent);
		finish();
	}
}